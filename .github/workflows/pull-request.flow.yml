name: Pull Request CI

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DATABASE_USER: ${{ vars.DATABASE_USER }}
      DATABASE_PASSWORD: ${{ vars.DATABASE_PASSWORD }}
      DATABASE_HOST: ${{ vars.DATABASE_HOST }}
      DATABASE_NAME: ${{ vars.DATABASE_NAME }}
      DATABASE_PORT: ${{ vars.DATABASE_PORT }}
      DATABASE_TYPE: ${{ vars.DATABASE_TYPE }}
      HASH_SALT: ${{ vars.HASH_SALT }}
      NODE_ENV: ${{ vars.NODE_ENV }}
      APPLICATION_PORT: ${{ vars.APPLICATION_PORT }}
      JWT_SECRET: ${{ vars.JWT_SECRET }}
      JWT_PRIVATE_KEY: ${{ vars.JWT_PRIVATE_KEY }}
      JWT_EXPIRES_IN_ACCESS_TOKEN: ${{ vars.JWT_EXPIRES_IN_ACCESS_TOKEN }}
      JWT_EXPIRES_IN_REFRESH_TOKEN: ${{ vars.JWT_EXPIRES_IN_REFRESH_TOKEN }}
    strategy:
      matrix:
        node-version: [18.x]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: ${{ vars.DATABASE_PASSWORD }}
          POSTGRES_USER: ${{ vars.DATABASE_USER }}
          POSTGRES_DB: ${{ vars.DATABASE_NAME }}
        ports:
          - ${{ vars.DATABASE_PORT }}:${{ vars.DATABASE_PORT }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present
      - run: npm run migration:run
      - run: npm run lint
      - run: npm run test:e2e
